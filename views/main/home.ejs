<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>39code.ai</title>
    <style>
      @import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700;900&display=swap");
      :root {
        --hki-bg: #000;
        --hki-surface: #111;
        --hki-border: rgba(255, 255, 255, 0.1);
        --hki-text-primary: #f0f0f0;
        --hki-text-secondary: #a0a0a0;
        --hki-accent-1: #4f46e5;
        --hki-accent-2: #a855f7;
      }
      body {
        background-color: var(--hki-bg);
        color: var(--hki-text-primary);
        font-family: "Inter", sans-serif;
        margin: 0;
        line-height: 1.6;
      }
      #hki_page_wrapper {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1rem;
      }
      #hki_header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem 0;
        position: relative;
        z-index: 10;
      }
      .hki_logo {
        font-size: 1.5rem;
        font-weight: 700;
      }
      .hki_nav a {
        color: var(--hki-text-secondary);
        text-decoration: none;
        margin-left: 2rem;
        transition: color 0.3s;
      }
      .hki_nav a:hover {
        color: var(--hki-text-primary);
      }
      .hki_nav_button {
        background: var(--hki-surface);
        border: 1px solid var(--hki-border);
        color: var(--hki-text-primary);
        padding: 0.5rem 1rem;
        border-radius: 6px;
        transition: 0.3s;
      }
      .hki_nav_button:hover {
        background: var(--hki-text-primary);
        color: var(--hki-bg);
      }
      #hki_mobile_nav_toggle {
        display: none;
        background: none;
        border: none;
        color: var(--hki-text-primary);
        font-size: 1.5rem;
        cursor: pointer;
      }
      #hki_hero {
        position: relative;
        height: 90vh;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
      }
      #hki_neural_canvas {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
      }
      .hki_hero_content {
        position: relative;
        z-index: 2;
        padding: 1rem;
      }
      #hki_hero_title {
        font-size: clamp(2.5rem, 10vw, 6rem);
        font-weight: 900;
        margin: 0 0 0.5rem 0;
        letter-spacing: -0.05em;
        line-height: 1;
        min-height: 1.2em;
      }
      .hki_hero_subtitle {
        font-size: clamp(1rem, 3vw, 1.25rem);
        color: var(--hki-text-secondary);
        max-width: 50ch;
        margin: 0 auto;
      }
      .hki_section {
        padding: 6rem 0;
      }
      .hki_bento_grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
      }
      .hki_feature_card {
        background: var(--hki-surface);
        border: 1px solid var(--hki-border);
        padding: 2rem;
        border-radius: 12px;
      }
      .hki_feature_card h3 {
        margin: 0 0 0.5rem 0;
        font-size: 1.25rem;
      }
      .hki_feature_card p {
        margin: 0;
        color: var(--hki-text-secondary);
      }
      .hki_large_card {
        grid-column: 1/-1;
      }
      .hki_animate_on_scroll {
        opacity: 0;
        transform: translateY(30px);
        transition: opacity 0.6s, transform 0.6s;
      }
      .hki_animate_on_scroll.hki_is_visible {
        opacity: 1;
        transform: translateY(0);
      }
      .hki_section_title {
        text-align: center;
        font-size: 2rem;
        margin-bottom: 2rem;
      }
      .hki_demo_terminal {
        background: var(--hki-surface);
        border: 1px solid var(--hki-border);
        border-radius: 12px;
        padding: 1.5rem;
        max-width: 800px;
        margin: 0 auto;
      }
      #hki_demo_output {
        min-height: 100px;
        margin-bottom: 1rem;
        color: var(--hki-text-secondary);
      }
      #hki_demo_output .hki_ai_response::after {
        content: "_";
        animation: hki_blink 0.7s infinite;
      }
      @keyframes hki_blink {
        50% {
          opacity: 0;
        }
      }
      #hki_demo_form {
        display: flex;
        gap: 1rem;
      }
      #hki_demo_input {
        flex-grow: 1;
        background: #000;
        border: 1px solid var(--hki-border);
        border-radius: 6px;
        padding: 0.75rem;
        font-family: inherit;
        font-size: 1rem;
        color: var(--hki-text-primary);
      }
      #hki_demo_form button {
        background-image: linear-gradient(
          to right,
          var(--hki-accent-1),
          var(--hki-accent-2)
        );
        border: none;
        color: var(--hki-text-primary);
        width: 50px;
        height: 50px;
        border-radius: 6px;
        font-size: 1.5rem;
        cursor: pointer;
      }
      #hki_cta {
        text-align: center;
      }
      #hki_cta h2 {
        font-size: 2.5rem;
        margin: 0 0 0.5rem 0;
      }
      #hki_cta p {
        color: var(--hki-text-secondary);
        margin-bottom: 2rem;
      }
      .hki_cta_button {
        background-image: linear-gradient(
          to right,
          var(--hki-accent-1),
          var(--hki-accent-2)
        );
        color: var(--hki-text-primary);
        padding: 1rem 2rem;
        text-decoration: none;
        border-radius: 8px;
        font-weight: 500;
        transition: 0.3s;
      }
      .hki_cta_button:hover {
        transform: scale(1.05);
        box-shadow: 0 10px 20px -5px rgba(168, 85, 247, 0.4);
      }
      #hki_footer {
        text-align: center;
        padding: 2rem 0;
        border-top: 1px solid var(--hki-border);
      }
      .hki_credit_line {
        display: inline-flex;
        align-items: center;
        gap: 0.75rem;
        color: var(--hki-text-secondary);
      }
      .hki_credit_line span {
        font-weight: 500;
      }
      .hki_footer_links {
        display: flex;
        gap: 0.5rem;
      }
      .hki_footer_links a {
        color: var(--hki-text-secondary);
        display: inline-flex;
        transition: color 0.2s, transform 0.2s;
      }
      .hki_footer_links a:hover {
        color: var(--hki-accent-1);
        transform: scale(1.1);
      }
      @media (max-width: 768px) {
        .hki_nav {
          display: none;
          position: absolute;
          top: 100%;
          right: 0;
          background: var(--hki-surface);
          width: 100%;
          flex-direction: column;
          align-items: flex-start;
          padding: 1rem;
        }
        .hki_nav.hki_mobile_open {
          display: flex;
        }
        .hki_nav a {
          margin: 0;
          padding: 1rem;
          width: calc(100% - 2rem);
        }
        #hki_mobile_nav_toggle {
          display: block;
        }
        .hki_bento_grid {
          grid-template-columns: 1fr;
        }
        .hki_large_card {
          grid-column: auto;
        }
      }
    </style>
  </head>
  <body>
    <div id="hki_page_wrapper">
      <header id="hki_header">
        <div class="hki_logo">39code.ai</div>
        <nav class="hki_nav">
          <a href="#">Platform</a>
          <a href="#">Solutions</a>
          <a href="#">API</a>
          <a href="/SnapFolio/index.html" target="_blank" class="hki_nav_button">Watch Out</a>
        </nav>
        <button id="hki_mobile_nav_toggle">☰</button>
      </header>

      <main id="hki_main_content">
        <section id="hki_hero">
          <canvas id="hki_neural_canvas"></canvas>
          <div class="hki_hero_content">
            <h1 id="hki_hero_title"></h1>
            <p class="hki_hero_subtitle">
              We don't just build tools. We build intelligence. Orchestrate
              complex tasks with autonomous agents that learn, adapt, and
              execute.
            </p>
          </div>
        </section>
              <section id="hki_demo" class="hki_section">
          <h2 class="hki_section_title hki_animate_on_scroll">
            Interact with the Core <br>
            we are working on this part
          </h2>
          <div class="hki_demo_terminal hki_animate_on_scroll">
            <div id="hki_demo_output"></div>
            <form id="hki_demo_form">
              <input
                type="text"
                id="hki_demo_input"
                placeholder="Ask a question, e.g., 'What is agentic AI?'"
                autocomplete="off"
              />
              <button type="submit">→</button>
            </form>
          </div>
        </section>

        <section id="hki_features" class="hki_section">
          <div class="hki_bento_grid">
            <div class="hki_feature_card hki_animate_on_scroll">
              <h3>Cognitive Core</h3>
              <p>
                Our foundational model understands context, reasons through
                complex problems, and generates novel solutions.
              </p>
            </div>
            <div class="hki_feature_card hki_animate_on_scroll">
              <h3>Dynamic Workflow</h3>
              <p>
                Deploy autonomous agents that create and execute their own task
                lists to achieve your objectives.
              </p>
            </div>
            <div class="hki_feature_card hki_animate_on_scroll hki_large_card">
              <h3>Seamless Integration</h3>
              <p>
                Integrate our AI's reasoning capabilities directly into your
                existing applications and workflows with a simple, powerful API.
              </p>
            </div>
          </div>
        </section>

  
<!-- 
        <section id="hki_cta" class="hki_section">
          <div class="hki_cta_content hki_animate_on_scroll">
            <h2>Unleash True Autonomy.</h2>
            <p>
              Move beyond automation. Start building with intelligence today.
            </p>
            <a href="#" class="hki_cta_button">Get Started</a>
          </div>
        </section> -->
      </main>

      <footer id="hki_footer">
        <div class="hki_credit_line">
          <span>Crafted by Bhavesh Shinde</span>
          <div class="hki_footer_links">
            <a
              href="#"
              target="_blank"
              title="LinkedIn"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path
                  d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"
                ></path>
                <rect x="2" y="9" width="4" height="12"></rect>
                <circle cx="4" cy="4" r="2"></circle>
              </svg>
            </a>
            <a
              href="#"
              target="_blank"
              title="Instagram"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <rect x="2" y="2" width="20" height="20" rx="5" ry="5"></rect>
                <path
                  d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"
                ></path>
                <line x1="17.5" y1="6.5" x2="17.51" y2="6.5"></line>
              </svg>
            </a>
          </div>
        </div>
      </footer>
    </div>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        function hki_initMobileNav() {
          const hki_toggle = document.getElementById("hki_mobile_nav_toggle");
          const hki_nav = document.querySelector(".hki_nav");
          hki_toggle.addEventListener("click", () =>
            hki_nav.classList.toggle("hki_mobile_open")
          );
        }

        function hki_initHeroTitle() {
          const hki_title = document.getElementById("hki_hero_title");
          const hki_text = "Synthesize Reality";
          const hki_chars = "ABCDEFGHIJKLM_NOPQRSTUVWXYZ-0123456789/\\";
          let hki_interval;
          let hki_iteration = 0;

          clearInterval(hki_interval);
          hki_interval = setInterval(() => {
            hki_title.innerText = hki_text
              .split("")
              .map((letter, index) => {
                if (index < hki_iteration) return hki_text[index];
                return hki_chars[Math.floor(Math.random() * hki_chars.length)];
              })
              .join("");
            if (hki_iteration >= hki_text.length) clearInterval(hki_interval);
            hki_iteration += 1 / 3;
          }, 40);
        }

        function hki_initNeuralCanvas() {
          const hki_canvas = document.getElementById("hki_neural_canvas");
          if (!hki_canvas) return;
          const hki_ctx = hki_canvas.getContext("2d");
          let hki_particles = [],
            hki_mouse = { x: null, y: null };
          const hki_particleCount = Math.floor(window.innerWidth / 30);

          const hki_resizeCanvas = () => {
            hki_canvas.width = hki_canvas.offsetWidth;
            hki_canvas.height = hki_canvas.offsetHeight;
          };
          hki_resizeCanvas();
          window.addEventListener("resize", hki_resizeCanvas);

          document.addEventListener("mousemove", (e) => {
            hki_mouse.x = e.x;
            hki_mouse.y = e.y;
          });

          class HkiParticle {
            constructor(x, y, dirX, dirY, size, color) {
              this.x = x;
              this.y = y;
              this.dirX = dirX;
              this.dirY = dirY;
              this.size = size;
              this.color = color;
            }
            draw() {
              hki_ctx.beginPath();
              hki_ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
              hki_ctx.fillStyle = this.color;
              hki_ctx.fill();
            }
            update() {
              if (this.x > hki_canvas.width || this.x < 0)
                this.dirX = -this.dirX;
              if (this.y > hki_canvas.height || this.y < 0)
                this.dirY = -this.dirY;

              let dx = hki_mouse.x - this.x;
              let dy = hki_mouse.y - this.y;
              let dist = Math.sqrt(dx * dx + dy * dy);
              if (dist < 100) {
                this.x += this.dirX + dx * 0.05;
                this.y += this.dirY + dy * 0.05;
              } else {
                this.x += this.dirX;
                this.y += this.dirY;
              }
              this.draw();
            }
          }

          const hki_initParticles = () => {
            hki_particles = [];
            for (let i = 0; i < hki_particleCount; i++) {
              let size = Math.random() * 2 + 1;
              let x = Math.random() * (innerWidth - size * 2);
              let y = Math.random() * (innerHeight - size * 2);
              let dirX = Math.random() * 0.4 - 0.2;
              let dirY = Math.random() * 0.4 - 0.2;
              hki_particles.push(
                new HkiParticle(
                  x,
                  y,
                  dirX,
                  dirY,
                  size,
                  "rgba(79, 70, 229, 0.8)"
                )
              );
            }
          };

          const hki_connectParticles = () => {
            for (let a = 0; a < hki_particles.length; a++) {
              for (let b = a; b < hki_particles.length; b++) {
                let dist = Math.sqrt(
                  Math.pow(hki_particles[a].x - hki_particles[b].x, 2) +
                    Math.pow(hki_particles[a].y - hki_particles[b].y, 2)
                );
                if (dist < 120) {
                  hki_ctx.strokeStyle = `rgba(168, 85, 247, ${1 - dist / 120})`;
                  hki_ctx.lineWidth = 0.5;
                  hki_ctx.beginPath();
                  hki_ctx.moveTo(hki_particles[a].x, hki_particles[a].y);
                  hki_ctx.lineTo(hki_particles[b].x, hki_particles[b].y);
                  hki_ctx.stroke();
                }
              }
            }
          };

          const hki_animate = () => {
            requestAnimationFrame(hki_animate);
            hki_ctx.clearRect(0, 0, innerWidth, innerHeight);
            hki_particles.forEach((p) => p.update());
            hki_connectParticles();
          };

          hki_initParticles();
          hki_animate();
        }

        function hki_initScrollAnimations() {
          const hki_observer = new IntersectionObserver(
            (entries) => {
              entries.forEach((entry) => {
                if (entry.isIntersecting) {
                  entry.target.classList.add("hki_is_visible");
                  hki_observer.unobserve(entry.target);
                }
              });
            },
            { threshold: 0.1 }
          );
          document
            .querySelectorAll(".hki_animate_on_scroll")
            .forEach((el) => hki_observer.observe(el));
        }

        function hki_initDemoTerminal() {
          const hki_form = document.getElementById("hki_demo_form");
          const hki_input = document.getElementById("hki_demo_input");
          const hki_output = document.getElementById("hki_demo_output");
          let hki_isTyping = false;

          const hki_responses = {
            "what is agentic ai?":
              "Agentic AI refers to autonomous systems that can perceive their environment, make decisions, and take actions to achieve specific goals without direct human intervention.",
            "how does it work?":
              "It operates on a loop of Observe, Orient, Decide, and Act (OODA). It assesses a situation, formulates a plan, and executes steps, learning from the outcomes.",
            default:
              "That's an interesting question. My core function is to break down complex objectives into executable tasks and orchestrate them to completion.",
          };

          const hki_typeResponse = (text) => {
            hki_isTyping = true;
            let i = 0;
            const hki_responseEl = document.createElement("p");
            hki_responseEl.className = "hki_ai_response";
            hki_output.innerHTML = "";
            hki_output.appendChild(hki_responseEl);
            const hki_interval = setInterval(() => {
              if (i < text.length) {
                hki_responseEl.textContent += text.charAt(i);
                i++;
              } else {
                clearInterval(hki_interval);
                hki_isTyping = false;
              }
            }, 30);
          };

          hki_form.addEventListener("submit", (e) => {
            e.preventDefault();
            if (hki_isTyping) return;
            const hki_query = hki_input.value.toLowerCase().trim();
            const hki_response =
              hki_responses[hki_query] || hki_responses["default"];
            hki_typeResponse(hki_response);
            hki_input.value = "";
          });
        }

        hki_initMobileNav();
        hki_initHeroTitle();
        hki_initNeuralCanvas();
        hki_initScrollAnimations();
        hki_initDemoTerminal();
      });
    </script>
  </body>
</html>
